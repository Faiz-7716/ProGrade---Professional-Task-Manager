/**
 * @fileoverview Firestore Security Rules for LinkedSpark application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for quiz history data.
 * Each user can only access their own quiz history.
 *
 * Data Structure:
 * Quiz history data is nested under /users/{userId}/quiz_history/{quizHistoryId}.
 * This hierarchical structure is used to enforce ownership.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - All write operations are protected by ownership checks.
 * - Data validation is limited to relational integrity (userId matching path).
 * - Denormalization for Authorization: The `userId` does not need to be stored again in the quiz history document because it is already present in the parent collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for quiz history entries. Only the user can create, read, update, or delete their own quiz history.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - User 'user123' creates a new quiz history entry under their own user ID.
     *   request.auth.uid == 'user123' && request.resource.data.userId == 'user123'
     * @allow (get) - User 'user123' reads their own quiz history entry.
     *   request.auth.uid == 'user123'
     * @allow (update) - User 'user123' updates their own quiz history entry.
     *   request.auth.uid == 'user123'
     * @allow (delete) - User 'user123' deletes their own quiz history entry.
     *   request.auth.uid == 'user123'
     * @deny (create) - User 'user456' attempts to create a quiz history entry under user 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.userId == 'user123'
     * @deny (get) - User 'user456' attempts to read a quiz history entry belonging to user 'user123'.
     *   request.auth.uid == 'user456'
     * @deny (update) - User 'user456' attempts to update a quiz history entry belonging to user 'user123'.
     *   request.auth.uid == 'user456'
     * @deny (delete) - User 'user456' attempts to delete a quiz history entry belonging to user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      // Helper function to check if the request is made by the owner of the user ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the user ID.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow reads (get) by the owner.
      allow get: if isOwner(userId);

      // Allow listing quiz history by the owner.
      allow list: if isOwner(userId);

      // Allow creation only if the user is creating the document for themselves and the userId matches the path.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates only if the user is the owner and the userId is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletes only if the user is the owner.
      allow delete: if isExistingOwner(userId);
    }
  }
}
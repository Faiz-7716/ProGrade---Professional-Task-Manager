/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only
 * access their own data, and no data can be accessed without authentication.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for scheduledEvents,
 * journalEntries, courses, and quiz_history. This structure ensures clear ownership
 * and allows for efficient querying of user-specific data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - All subcollections inherit the user-ownership constraint from the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) User with ID 'test_user' can create their own user document.
     * @deny (create) User with ID 'another_user' cannot create a document under 'test_user'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Rules for the /users/{userId}/scheduledEvents/{eventId} collection.
       * @path /users/{userId}/scheduledEvents/{eventId}
       * @allow (create) User with ID 'test_user' can create a scheduled event under their user document.
       * @deny (create) User with ID 'another_user' cannot create a scheduled event under 'test_user'.
       * @principle Enforces document ownership for writes.
       */
      match /scheduledEvents/{eventId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      /**
       * @description Rules for the /users/{userId}/journalEntries/{entryId} collection.
       * @path /users/{userId}/journalEntries/{entryId}
       * @allow (create) User with ID 'test_user' can create a journal entry under their user document.
       * @deny (create) User with ID 'another_user' cannot create a journal entry under 'test_user'.
       * @principle Enforces document ownership for writes.
       */
      match /journalEntries/{entryId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      /**
       * @description Rules for the /users/{userId}/courses/{courseId} collection.
       * @path /users/{userId}/courses/{courseId}
       * @allow (create) User with ID 'test_user' can create a course under their user document.
       * @deny (create) User with ID 'another_user' cannot create a course under 'test_user'.
       * @principle Enforces document ownership for writes.
       */
      match /courses/{courseId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }

      /**
       * @description Rules for the /users/{userId}/quiz_history/{quizHistoryId} collection.
       * @path /users/{userId}/quiz_history/{quizHistoryId}
       * @allow (create) User with ID 'test_user' can create a quiz history entry under their user document.
       * @deny (create) User with ID 'another_user' cannot create a quiz history entry under 'test_user'.
       * @principle Enforces document ownership for writes.
       */
      match /quiz_history/{quizHistoryId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree nested under `/users/{userId}`, and only that user can read or write to their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and preventing unauthorized access.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - All write operations are restricted to the owner of the data.
 * - Data consistency between the path and the document's internal fields is enforced on creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Controls access to user documents.
       * @path /users/{userId}
       * @allow (create) User with ID 'user123' can create their own user document.
       * @deny (create) User with ID 'user123' cannot create a user document with a different ID ('user456').
       * @principle Enforces user-ownership, validates user ID on creation.
       */
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;

      match /quiz_history/{quizHistoryId} {
        /**
         * @description Controls access to quiz history entries for a specific user.
         * @path /users/{userId}/quiz_history/{quizHistoryId}
         * @allow (create) User with ID 'user123' can create a quiz history entry under their user document.
         * @deny (update) User with ID 'user123' cannot update a quiz history entry under another user's document.
         * @principle Enforces user-ownership, ensures only the owner can manage their quiz history.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      match /courses/{courseId} {
        /**
         * @description Controls access to course entries for a specific user.
         * @path /users/{userId}/courses/{courseId}
         * @allow (create) User with ID 'user123' can create a course entry under their user document.
         * @deny (delete) User with ID 'user123' cannot delete a course entry under another user's document.
         * @principle Enforces user-ownership, ensures only the owner can manage their courses.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      match /journalEntries/{entryId} {
        /**
         * @description Controls access to journal entries for a specific user.
         * @path /users/{userId}/journalEntries/{entryId}
         * @allow (create) User with ID 'user123' can create a journal entry under their user document.
         * @deny (update) User with ID 'user123' cannot update a journal entry under another user's document.
         * @principle Enforces user-ownership, ensures only the owner can manage their journal entries.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      match /scheduledEvents/{eventId} {
        /**
         * @description Controls access to scheduled events for a specific user.
         * @path /users/{userId}/scheduledEvents/{eventId}
         * @allow  (list) User 'OJivuWtGOARE9HP6FaTOLe6br3G2' can list their own scheduled events.
         * @deny (list) User 'OtherUserID' cannot list scheduled events for user 'OJivuWtGOARE9HP6FaTOLe6br3G2'.
         * @principle Enforces user-ownership, ensures only the owner can manage their schedule events.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}
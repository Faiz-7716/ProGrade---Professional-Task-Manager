/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 *  - /users/{userId}/quiz_history/{quizHistoryId}: Stores quiz history entries for a specific user.
 *  - /users/{userId}/courses/{courseId}: Stores course data for a specific user.
 *  - /users/{userId}/journalEntries/{entryId}: Stores journal entries for a specific user.
 *
 * Key Security Decisions:
 *  - User listing is implicitly denied because there is no top-level /users collection.
 *  - All write operations are protected by authorization checks based on the authenticated user's UID.
 *  - Data validation is limited to ensuring relational integrity and path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for quiz history entries, ensuring only the owner can manage their own data.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - User 'user123' can create a new quiz history entry under their own user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete their own quiz history entries.
     * @deny (create) - User 'user456' cannot create a quiz history entry under user 'user123's ID.
     * @deny (get, list, update, delete) - User 'user456' cannot read, list, update, or delete quiz history entries under user 'user123's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows users to read their own quiz history entries.
      allow get: if isOwner(userId);
      // Allows users to list their own quiz history entries.
      allow list: if isOwner(userId);

      // Allows users to create new quiz history entries under their own user ID.
      allow create: if isSignedIn() && isOwner(userId) ;

      // Allows users to update their own quiz history entries.
      allow update: if isExistingOwner(userId);

      // Allows users to delete their own quiz history entries.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for courses, ensuring only the owner can manage their own course data.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - User 'user123' can create a new course under their own user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete their own courses.
     * @deny (create) - User 'user456' cannot create a course under user 'user123's ID.
     * @deny (get, list, update, delete) - User 'user456' cannot read, list, update, or delete courses under user 'user123's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows users to read their own courses.
      allow get: if isOwner(userId);
      // Allows users to list their own courses.
      allow list: if isOwner(userId);

      // Allows users to create new courses under their own user ID.
      allow create: if isSignedIn() && isOwner(userId) ;

      // Allows users to update their own courses.
      allow update: if isExistingOwner(userId);

      // Allows users to delete their own courses.
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces access control for learning journal entries, ensuring only the owner can manage their own entries.
      * @path /users/{userId}/journalEntries/{entryId}
      * @allow (create) - User 'user123' can create a new journal entry under their own user ID.
      * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete their own journal entries.
      * @deny (create) - User 'user456' cannot create a journal entry under user 'user123's ID.
      * @deny (get, list, update, delete) - User 'user456' cannot read, list, update, or delete journal entries under user 'user123's ID.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/journalEntries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows users to read their own journal entries.
      allow get: if isOwner(userId);
      // Allows users to list their own journal entries.
      allow list: if isOwner(userId);

      // Allows users to create new journal entries under their own user ID.
      allow create: if isSignedIn() && isOwner(userId) ;

      // Allows users to update their own journal entries.
      allow update: if isExistingOwner(userId);

      // Allows users to delete their own journal entries.
      allow delete: if isExistingOwner(userId);
    }
  }
}
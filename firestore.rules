/**
 * @fileoverview Firestore Security Rules for Prograde Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access data
 * associated with their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear ownership hierarchy.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data shape is not strictly validated to allow for prototyping.
 * - All write operations require a verified user identity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user-specific quiz history entries.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) User 'user123' can create a new quiz history entry under their own user ID.
     * @allow (get, list) User 'user123' can read and list their own quiz history entries.
     * @allow (update, delete) User 'user123' can update or delete their own quiz history entries.
     * @deny (create) User 'user456' cannot create a quiz history entry under user 'user123''s ID.
     * @deny (get, list) User 'user456' cannot read or list quiz history entries under user 'user123''s ID.
     * @deny (update, delete) User 'user456' cannot update or delete quiz history entries under user 'user123''s ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user-specific courses.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User 'user123' can create a new course under their own user ID.
     * @allow (get, list) User 'user123' can read and list their own courses.
     * @allow (update, delete) User 'user123' can update or delete their own courses.
     * @deny (create) User 'user456' cannot create a course under user 'user123''s ID.
     * @deny (get, list) User 'user456' cannot read or list courses under user 'user123''s ID.
     * @deny (update, delete) User 'user456' cannot update or delete courses under user 'user123''s ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user-specific journal entries.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (create) User 'user123' can create a new journal entry under their own user ID.
     * @allow (get, list) User 'user123' can read and list their own journal entries.
     * @allow (update, delete) User 'user123' can update or delete their own journal entries.
     * @deny (create) User 'user456' cannot create a journal entry under user 'user123''s ID.
     * @deny (get, list) User 'user456' cannot read or list journal entries under user 'user123''s ID.
     * @deny (update, delete) User 'user456' cannot update or delete journal entries under user 'user123''s ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user-specific scheduled events.
     * @path /users/{userId}/scheduledEvents/{eventId}
     * @allow (create) User 'user123' can create a new scheduled event under their own user ID.
     * @allow (get, list) User 'user123' can read and list their own scheduled events.
     * @allow (update, delete) User 'user123' can update or delete their own scheduled events.
     * @deny (create) User 'user456' cannot create a scheduled event under user 'user123''s ID.
     * @deny (get, list) User 'user456' cannot read or list scheduled events under user 'user123''s ID.
     * @deny (update, delete) User 'user456' cannot update or delete scheduled events under user 'user123''s ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduledEvents/{eventId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}
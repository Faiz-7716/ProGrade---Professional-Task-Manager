/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has a dedicated data tree rooted at `/users/{userId}`, and only that user can read or write data within their own tree.
 *
 * Data Structure:
 * All personal user data (courses, quiz history, journal entries) is nested under the `/users/{userId}` collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Read-only collections are not present in this data model.
 * - All writes require authentication (`request.auth != null`) and are further restricted by ownership.
 *
 * Denormalization for Authorization:
 *  To avoid `get()` calls in security rules, the `userId` is present on each document, enabling us to enforce path-based ownership using `isOwner()`.
 *
 * Structural Segregation:
 * There is no public data in this model, so all data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that userId is immutable on updates.
     */
    function isUserIdImmutable(userId) {
        return request.resource.data.userId == userId;
    }

    /**
     * @description Rules for the user documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own user document if the userId matches their auth.uid.
     * @deny (create) - A user cannot create a user document with an ID that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }


    /**
     * @description Manages access to quiz history entries for a specific user.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - A user can create a quiz history entry under their own user ID.
     * @deny (create) - A user cannot create a quiz history entry under another user's ID.
     * @allow (get) - A user can retrieve their own quiz history entry.
     * @deny (get) - A user cannot retrieve another user's quiz history entry.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to course entries for a specific user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - A user can create a course entry under their own user ID.
     * @deny (create) - A user cannot create a course entry under another user's ID.
     * @allow (get) - A user can retrieve their own course entry.
     * @deny (get) - A user cannot retrieve another user's course entry.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Manages access to journal entries for a specific user.
       * @path /users/{userId}/journalEntries/{entryId}
       * @allow (create) - A user can create a journal entry under their own user ID.
       * @deny (create) - A user cannot create a journal entry under another user's ID.
       * @allow (get) - A user can retrieve their own journal entry.
       * @deny (get) - A user cannot retrieve another user's journal entry.
       * @principle Enforces document ownership for all operations.
       */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own data,
 * which is stored under their respective user ID. There is no public data or shared access between users.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, and each subcollection (quiz_history, courses, journalEntries, scheduledEvents)
 * follows this pattern.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized enumeration.
 * - All write operations are restricted to the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Secures access to a user's quiz history entries.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (read, write) User with ID 'user123' can read/write their own quiz history.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123's quiz history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures access to a user's courses.
     * @path /users/{userId}/courses/{courseId}
     * @allow (read, write) User with ID 'user123' can read/write their own course data.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123's course data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures access to a user's journal entries.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (read, write) User with ID 'user123' can read/write their own journal entries.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123's journal entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures access to a user's scheduled events.
     * @path /users/{userId}/scheduledEvents/{eventId}
     * @allow (read, write) User with ID 'user123' can read/write their own scheduled events.
     * @deny (read, write) User with ID 'user456' cannot read/write 'user123's scheduled events.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduledEvents/{eventId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
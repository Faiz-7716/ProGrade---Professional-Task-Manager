/**
 * @file Firebase Security Rules for Prograde application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model,
 * ensuring that users can only access their own data (courses and quiz history).
 *
 * @data_structure Data is organized under user-specific paths:
 *   - /users/{userId}/quiz_history/{quizHistoryId}
 *   - /users/{userId}/courses/{courseId}
 *
 * @key_security_decisions
 *   - Listing all users is disallowed.
 *   - Ambiguous or missing authorization information defaults to strict denial.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure quiz history entries for each user.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - User 'user123' can create a quiz history entry under their own user ID.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', quizName: 'Math Quiz', points: 90, correctAnswers: 27, wrongAnswers: 3, completionDate: '2024-01-01T12:00:00Z' } } }
     * @allow (get, list) - User 'user123' can read their own quiz history.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update, delete) - User 'user123' can update/delete a quiz history entry under their own user ID.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User 'user456' cannot create a quiz history entry under user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { userId: 'user123', quizName: 'Math Quiz', points: 90, correctAnswers: 27, wrongAnswers: 3, completionDate: '2024-01-01T12:00:00Z' } } }
     * @deny (get, list) - User 'user456' cannot read quiz history of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update, delete) - User 'user456' cannot update/delete a quiz history entry under user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership via path; users can only access their own quiz history.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      // Allow read access to authenticated users if they are the owner
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow create access to authenticated users if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow update access to authenticated users if they are the owner and the resource exists
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow delete access to authenticated users if they are the owner and the resource exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure course entries for each user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - User 'user123' can create a course under their own user ID.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', name: 'Math 101', platform: 'Coursera', totalModules: 10, modulesCompleted: 0, status: 'Not Started', addedAt: '2024-01-01T00:00:00Z' } } }
     * @allow (get, list) - User 'user123' can read their own courses.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update, delete) - User 'user123' can update/delete a course under their own user ID.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User 'user456' cannot create a course under user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { userId: 'user123', name: 'Math 101', platform: 'Coursera', totalModules: 10, modulesCompleted: 0, status: 'Not Started', addedAt: '2024-01-01T00:00:00Z' } } }
     * @deny (get, list) - User 'user456' cannot read courses of user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (update, delete) - User 'user456' cannot update/delete a course under user 'user123'.
     *   Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership via path; users can only access their own courses.
     */
    match /users/{userId}/courses/{courseId} {
      // Allow read access to authenticated users if they are the owner
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow create access to authenticated users if they are the owner
      allow create: if isSignedIn() && isOwner(userId);

      // Allow update access to authenticated users if they are the owner and the resource exists
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow delete access to authenticated users if they are the owner and the resource exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
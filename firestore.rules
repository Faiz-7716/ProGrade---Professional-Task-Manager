/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user's data (courses, journal entries, scheduled events, and quiz history) is stored under their respective `/users/{userId}` path, and only the authenticated user with the matching `userId` can access that data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear separation of user data.
 *   - /users/{userId}/quiz_history/{quizHistoryId}
 *   - /users/{userId}/courses/{courseId}
 *   - /users/{userId}/journalEntries/{entryId}
 *   - /users/{userId}/scheduledEvents/{eventId}
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed as there are no rules on the root `/users` collection.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request.auth.uid matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request.auth.uid matches the provided userId and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/quiz_history/{quizHistoryId} collection.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - Authenticated user creates a new quiz history entry under their own user ID.
     * @allow (get) - Authenticated user reads their own quiz history entry.
     * @allow (update) - Authenticated user updates their own quiz history entry.
     * @allow (delete) - Authenticated user deletes their own quiz history entry.
     * @deny (create) - Attempt to create a quiz history entry under a different user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/courses/{courseId} collection.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - Authenticated user creates a new course under their own user ID.
     * @allow (get) - Authenticated user reads their own course.
     * @allow (update) - Authenticated user updates their own course.
     * @allow (delete) - Authenticated user deletes their own course.
     * @deny (create) - Attempt to create a course under a different user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/journalEntries/{entryId} collection.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (create) - Authenticated user creates a new journal entry under their own user ID.
     * @allow (get) - Authenticated user reads their own journal entry.
     * @allow (update) - Authenticated user updates their own journal entry.
     * @allow (delete) - Authenticated user deletes their own journal entry.
     * @deny (create) - Attempt to create a journal entry under a different user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/scheduledEvents/{eventId} collection.
     * @path /users/{userId}/scheduledEvents/{eventId}
     * @allow (create) - Authenticated user creates a new scheduled event under their own user ID.
     * @allow (get) - Authenticated user reads their own scheduled event.
     * @allow (update) - Authenticated user updates their own scheduled event.
     * @allow (delete) - Authenticated user deletes their own scheduled event.
     * @deny (create) - Attempt to create a scheduled event under a different user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scheduledEvents/{eventId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @file Firebase Security Rules for Prograde Application
 *
 * @description This ruleset enforces a strict user-ownership model for all data.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user
 * can access their own data. No listing of users is allowed.
 *
 * @dataStructure
 * - /users/{userId}/quiz_history/{quizHistoryId}: Stores quiz history for each user.
 * - /users/{userId}/courses/{courseId}: Stores course tracking information for each user.
 * - /users/{userId}/journalEntries/{entryId}: Stores learning journal entries for each user.
 *
 * @keySecurityDecisions
 * - User listing is explicitly denied to protect user privacy.
 * - Each data type (courses, quiz history, journal entries) is stored in a dedicated subcollection under the user's document.
 * - Path-based ownership is enforced: the `userId` extracted from the path must match the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against listing all users in the database.  This is almost always a bad idea.
     * @path /users
     * @allow (get) - N/A, collection doesn't exist at this path
     * @allow (list) - N/A, collection doesn't exist at this path
     * @allow (create) - N/A, collection doesn't exist at this path
     * @allow (update) - N/A, collection doesn't exist at this path
     * @allow (delete) - N/A, collection doesn't exist at this path
     * @deny (list) Any attempt to list all users.
     * @principle Prevents enumeration of users and protects privacy.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures quiz history entries, ensuring only the owner can manage them.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (get) Authenticated user reading their own quiz history entry.
     * @allow (list) Authenticated user listing their own quiz history entries.
     * @allow (create) Authenticated user creating a quiz history entry under their own user ID.
     * @allow (update) Authenticated user updating their own existing quiz history entry.
     * @allow (delete) Authenticated user deleting their own existing quiz history entry.
     * @deny (create) Attempt by one user to create a quiz history entry under another user's ID.
     * @deny (update) Attempt by one user to update a quiz history entry under another user's ID.
     * @deny (delete) Attempt by one user to delete a quiz history entry under another user's ID.
     * @principle Enforces document ownership for all CRUD operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secures course entries, ensuring only the owner can manage them.
     * @path /users/{userId}/courses/{courseId}
     * @allow (get) Authenticated user reading their own course entry.
     * @allow (list) Authenticated user listing their own course entries.
     * @allow (create) Authenticated user creating a course entry under their own user ID.
     * @allow (update) Authenticated user updating their own existing course entry.
     * @allow (delete) Authenticated user deleting their own existing course entry.
     * @deny (create) Attempt by one user to create a course entry under another user's ID.
     * @deny (update) Attempt by one user to update a course entry under another user's ID.
     * @deny (delete) Attempt by one user to delete a course entry under another user's ID.
     * @principle Enforces document ownership for all CRUD operations.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secures learning journal entries, ensuring only the owner can manage them.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (get) Authenticated user reading their own journal entry.
     * @allow (list) Authenticated user listing their own journal entries.
     * @allow (create) Authenticated user creating a journal entry under their own user ID.
     * @allow (update) Authenticated user updating their own existing journal entry.
     * @allow (delete) Authenticated user deleting their own existing journal entry.
     * @deny (create) Attempt by one user to create a journal entry under another user's ID.
     * @deny (update) Attempt by one user to update a journal entry under another user's ID.
     * @deny (delete) Attempt by one user to delete a journal entry under another user's ID.
     * @principle Enforces document ownership for all CRUD operations.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}
/**
 * @fileoverview Firestore Security Rules for the Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access data
 * associated with their own user ID. All data is nested under /users/{userId}, providing clear
 * ownership boundaries and preventing unauthorized access.
 *
 * Data Structure:
 * - /users/{userId}/quiz_history/{quizHistoryId}: Stores quiz history for each user.
 * - /users/{userId}/courses/{courseId}: Stores course data for each user.
 * - /users/{userId}/journalEntries/{entryId}: Stores journal entries for each user.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no top-level /users collection).
 * - All write operations require a verified user identity (request.auth != null).
 * - Read operations are restricted to the owning user, based on the path.
 *
 * Denormalization for Authorization:
 *  - Not required. The path-based ownership model avoids the need for denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for quiz history entries, allowing only the owning user to read and write.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) User with ID 'user123' can create a new quiz history entry under /users/user123/quiz_history/quiz456.
     * @allow (get, list) User with ID 'user123' can read their quiz history entries under /users/user123/quiz_history/.
     * @allow (update, delete) User with ID 'user123' can update/delete their quiz history entry under /users/user123/quiz_history/quiz456.
     * @deny (create, get, list, update, delete) User with ID 'user456' cannot access quiz history entries under /users/user123/quiz_history/.
     * @principle Enforces path-based ownership, ensuring only the owner can manage their quiz history.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      // Signed-in users only.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for course entries, allowing only the owning user to read and write.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User with ID 'user123' can create a new course entry under /users/user123/courses/course456.
     * @allow (get, list) User with ID 'user123' can read their course entries under /users/user123/courses/.
     * @allow (update, delete) User with ID 'user123' can update/delete their course entry under /users/user123/courses/course456.
     * @deny (create, get, list, update, delete) User with ID 'user456' cannot access course entries under /users/user123/courses/.
     * @principle Enforces path-based ownership, ensuring only the owner can manage their courses.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for learning journal entries, allowing only the owning user to read and write.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (create) User with ID 'user123' can create a new journal entry under /users/user123/journalEntries/entry456.
     * @allow (get, list) User with ID 'user123' can read their journal entries under /users/user123/journalEntries/.
     * @allow (update, delete) User with ID 'user123' can update/delete their journal entry under /users/user123/journalEntries/entry456.
     * @deny (create, get, list, update, delete) User with ID 'user456' cannot access journal entries under /users/user123/journalEntries/.
     * @principle Enforces path-based ownership, ensuring only the owner can manage their journal entries.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}
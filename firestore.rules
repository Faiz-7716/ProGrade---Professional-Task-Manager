/**
 * @fileoverview Firestore Security Rules for the Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access their own data. This is achieved through path-based authorization.
 *
 * Data Structure:
 * All user-specific data is nested under the `/users/{userId}` path, ensuring
 * clear ownership and preventing cross-user data access. This includes quiz
 * history, courses, and journal entries.
 *
 * Key Security Decisions:
 * - No user listing is allowed to protect user privacy.
 * - All write operations are restricted to the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows users to manage their own quiz history entries.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 creates a new quiz history entry under their own user ID.
     * @deny (create) User differentUser attempts to create a quiz history entry under user ID OJivuWtGOARE9HP6FaTOLe6br3G2.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to manage their own courses.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 creates a new course under their own user ID.
     * @deny (create) User differentUser attempts to create a course under user ID OJivuWtGOARE9HP6FaTOLe6br3G2.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

      /**
       * @description Allows users to manage their own journal entries.
       * @path /users/{userId}/journalEntries/{entryId}
       * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 creates a new journal entry under their own user ID.
       * @deny (create) User differentUser attempts to create a journal entry under user ID OJivuWtGOARE9HP6FaTOLe6br3G2.
       * @principle Enforces document ownership for writes.
       */
    match /users/{userId}/journalEntries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}
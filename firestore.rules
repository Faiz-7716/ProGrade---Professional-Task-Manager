/**
 * @fileoverview Firestore Security Rules for Prograde Application
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model, where each user
 * can only access data explicitly associated with their user ID.
 *
 * Data Structure: All data is nested under /users/{userId}, ensuring clear ownership
 * and preventing unauthorized access.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied as there is no rule allowing it.
 * - All write operations are protected by authorization checks, preventing unauthorized data modification.
 * - The rules strictly enforce path-based ownership, ensuring users can only access their own data.
 * - Data schema validation is relaxed to allow for rapid prototyping and flexible data shapes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user-specific quiz history.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) Authenticated user creating their own quiz history entry: request.auth.uid == userId
     * @deny (create) Authenticated user trying to create a quiz history entry for another user: request.auth.uid != userId
     * @allow (get) Authenticated user reading their own quiz history entry: request.auth.uid == userId
     * @deny (get) Authenticated user trying to read another user's quiz history entry: request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific courses.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) Authenticated user creating their own course: request.auth.uid == userId
     * @deny (create) Authenticated user trying to create a course for another user: request.auth.uid != userId
     * @allow (get) Authenticated user reading their own course: request.auth.uid == userId
     * @deny (get) Authenticated user trying to read another user's course: request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/courses/{courseId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific learning journal entries.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (create) Authenticated user creating their own journal entry: request.auth.uid == userId
     * @deny (create) Authenticated user trying to create a journal entry for another user: request.auth.uid != userId
     * @allow (get) Authenticated user reading their own journal entry: request.auth.uid == userId
     * @deny (get) Authenticated user trying to read another user's journal entry: request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/journalEntries/{entryId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}
/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 *  - /users/{userId}/quiz_history/{quizHistoryId}: Stores quiz history.
 *  - /users/{userId}/courses/{courseId}: Stores course data.
 *  - /users/{userId}/journalEntries/{entryId}: Stores journal entries.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - All write operations require a verified user identity (request.auth != null).
 * - Data structure enforces path-based ownership, simplifying rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures quiz history entries, allowing only the owning user to read and write.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (list) User OJivuWtGOARE9HP6FaTOLe6br3G2 can list their own quiz history entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history.
     * @allow (get) User OJivuWtGOARE9HP6FaTOLe6br3G2 can get their own quiz history entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history/someQuizId.
     * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 can create a quiz history entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history.
     * @allow (update) User OJivuWtGOARE9HP6FaTOLe6br3G2 can update their own quiz history entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history/someQuizId.
     * @allow (delete) User OJivuWtGOARE9HP6FaTOLe6br3G2 can delete their own quiz history entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history/someQuizId.
     * @deny (list) User anotherUser cannot list quiz history entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history.
     * @deny (create) User anotherUser cannot create a quiz history entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/quiz_history.
     * @principle Enforces document ownership via path and requires authentication for all operations.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the EXISTING document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures course entries, allowing only the owning user to read and write.
     * @path /users/{userId}/courses/{courseId}
     * @allow (list) User OJivuWtGOARE9HP6FaTOLe6br3G2 can list their own course entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses.
     * @allow (get) User OJivuWtGOARE9HP6FaTOLe6br3G2 can get their own course entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses/someCourseId.
     * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 can create a course entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses.
     * @allow (update) User OJivuWtGOARE9HP6FaTOLe6br3G2 can update their own course entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses/someCourseId.
     * @allow (delete) User OJivuWtGOARE9HP6FaTOLe6br3G2 can delete their own course entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses/someCourseId.
     * @deny (list) User anotherUser cannot list course entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses.
     * @deny (create) User anotherUser cannot create a course entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/courses.
     * @principle Enforces document ownership via path and requires authentication for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the EXISTING document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures learning journal entries, allowing only the owning user to read and write.
     * @path /users/{userId}/journalEntries/{entryId}
     * @allow (list) User OJivuWtGOARE9HP6FaTOLe6br3G2 can list their own journal entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries.
     * @allow (get) User OJivuWtGOARE9HP6FaTOLe6br3G2 can get their own journal entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries/someEntryId.
     * @allow (create) User OJivuWtGOARE9HP6FaTOLe6br3G2 can create a journal entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries.
     * @allow (update) User OJivuWtGOARE9HP6FaTOLe6br3G2 can update their own journal entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries/someEntryId.
     * @allow (delete) User OJivuWtGOARE9HP6FaTOLe6br3G2 can delete their own journal entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries/someEntryId.
     * @deny (list) User anotherUser cannot list journal entries under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries.
     * @deny (create) User anotherUser cannot create a journal entry under /users/OJivuWtGOARE9HP6FaTOLe6br3G2/journalEntries.
     * @principle Enforces document ownership via path and requires authentication for all operations.
     */
    match /users/{userId}/journalEntries/{entryId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the EXISTING document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Prograde application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user
 * can only access and modify data associated with their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for courses, journal entries, scheduled events, and quiz history.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is limited to relational integrity checks (ownership).
 * - Each top level collection is locked to owner-only access.
 * - No admin roles are defined.
 *
 * Denormalization for Authorization:
 *  - The 'userId' field is present in every document and MUST match the {userId}
 * segment of the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
     * @description Checks if the user is the owner of the existing document.
     *  This function ensures that the document exists before checking ownership,
     *  which is crucial for update and delete operations to prevent errors on
     *  non-existent documents.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for the root users collection. Listing users is forbidden.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @deny (get, list, update, delete) Any operation other than creating your own document.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;

      /**
       * @description Rules for the quiz_history subcollection. Only the owner can access their own quiz history.
       * @path /users/{userId}/quiz_history/{quizHistoryId}
       * @allow (create) User with UID 'user123' can create a quiz history entry under their user ID.
       * @allow (get, list) User with UID 'user123' can read their own quiz history entries.
       * @allow (update, delete) User with UID 'user123' can update/delete their own quiz history entries.
       * @deny (create, get, list, update, delete) Any other user attempting to access this data.
       * @principle Enforces strict user ownership.
       */
      match /quiz_history/{quizHistoryId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Rules for the courses subcollection. Only the owner can access their own courses.
       * @path /users/{userId}/courses/{courseId}
       * @allow (create) User with UID 'user123' can create a course under their user ID.
       * @allow (get, list) User with UID 'user123' can read their own courses.
       * @allow (update, delete) User with UID 'user123' can update/delete their own courses.
       * @deny (create, get, list, update, delete) Any other user attempting to access this data.
       * @principle Enforces strict user ownership.
       */
      match /courses/{courseId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Rules for the journalEntries subcollection. Only the owner can access their own journal entries.
       * @path /users/{userId}/journalEntries/{entryId}
       * @allow (create) User with UID 'user123' can create a journal entry under their user ID.
       * @allow (get, list) User with UID 'user123' can read their own journal entries.
       * @allow (update, delete) User with UID 'user123' can update/delete their own journal entries.
       * @deny (create, get, list, update, delete) Any other user attempting to access this data.
       * @principle Enforces strict user ownership.
       */
      match /journalEntries/{entryId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Rules for the scheduledEvents subcollection. Only the owner can access their own scheduled events.
       * @path /users/{userId}/scheduledEvents/{eventId}
       * @allow (create) User with UID 'user123' can create a scheduled event under their user ID.
       * @allow (get, list) User with UID 'user123' can read their own scheduled events.
       * @allow (update, delete) User with UID 'user123' can update/delete their own scheduled events.
       * @deny (create, get, list, update, delete) Any other user attempting to access this data.
       * @principle Enforces strict user ownership.
       */
      match /scheduledEvents/{eventId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}